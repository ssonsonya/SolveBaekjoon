#include "stdafx.h"
#include "Virus.h"

#include <iostream>
#include <vector>
using namespace std;

Virus::Virus()
{
	cout << "\n [ 2606 | 그래프와 순회 | 바이러스 ]\n";
	cout << "\n 문제 : 신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다.\n        한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.\n        예를 들어 7대의 컴퓨터가 네트워크 상에서 연결되어 있다고 하자.\n        1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어\n        2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다.\n        하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서 연결되어 있지 않기 때문에 영향을 받지 않는다.\n        어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다.\n        컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때,\n        1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.";
	cout << "\n 입력 : 첫째 줄에는 컴퓨터의 수가 주어진다.\n        컴퓨터의 수는 100 이하인 양의 정수이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다.\n        둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다.\n        이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.";
	cout << "\n 출력 : 1번 컴퓨터가 웜 바이러스에 걸렸을 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 첫째 줄에 출력한다.";

	cout << "\n -----------------------------------\n\n";

	Answer();
}

vector<int> N_2606[101];
int virus_2606[105];
int ans_2606;

void DFS_2606(int x)
{
	for (int i = 0; i < (int)N_2606[x].size(); i++)		// vector의 size()는 size_t로 반환되기 때문에 (int)로 캐스팅하기
	{
		int k = N_2606[x][i];

		if (virus_2606[k] == 0)
		{
			virus_2606[k] = 1;
			ans_2606++;
			DFS_2606(k);
		}
	}
	return;
}

void Virus::Answer()
{
	int n, m, a, b = 0;

	cin >> n >> m;

	for (int i = 0; i < m; ++i)
	{
		cin >> a >> b;

		N_2606[a].push_back(b);
		N_2606[b].push_back(a);
	}

	virus_2606[1] = 1;
	DFS_2606(1);

	cout << ans_2606;

//	return 0;
}

void Virus::Result()
{
}
